"PATIENT_ADDRESS1", "PATIENT_ADDRESS2", "PATIENT_CITY", "PATIENT_STATE",
"PATIENT_ZIP","PATIENT_PHONENUMBER", "PATIENT_EMAIL", "GUARDIAN_PHONENUMBER",
"FACILITY_NAME")) %>%
arrange(desc(PATIENT_ID))  %>%
mutate(ADMINISTRATION_DATE = ymd_hms(ADMINISTRATION_DATE),
INSERT_STAMP = ymd_hms(INSERT_STAMP, tz = "America/Puerto_Rico"),
DOB = ymd_hms(DOB))
rownames(vax_data_BP_today) <- c(1:dim(vax_data_BP_today)[1])
max(vax_data_BP_today$INSERT_STAMP)
save(vax_data_BP_today, file = "rdas/vax_data_BP_today.rda")
if (days<30) {
lista <- list(vax_data_BP, vax_data_BP_today)
} else {
lista <- list(vax_data_BP_today)
}
vax_data_BP <-  do.call("rbind",lista) %>% data.table::as.data.table()
save(vax_data_BP, file = "rdas/vax_data_BP.rda")
max(vax_data_BP$INSERT_STAMP)
library(tidyverse)
library(stringdist)
library(fuzzyjoin)
library(lubridate)
library(dplyr)
source("pareo/init.R")
source("pareo/funcs.R")
load("rdas/bp_preis_map.rda")
fix_names <- function(x){
replace_na(x, "") %>%
str_remove_all("\\s+") %>%
str_replace_all("á", "a") %>%
str_replace_all("é", "e") %>%
str_replace_all("í", "i") %>%
str_replace_all("ó", "o") %>%
str_replace_all("ú", "u") %>%
str_replace_all("ü", "u") %>%
str_replace_all("ñ", "n") %>%
str_remove_all("[^a-zA-Z\\s]+") %>%
str_trim()
}
#
## covert del valle to delvalle, de la
join_dela <- function(x){
str_replace_all(x, "^(y|de|la|las|los|del|lo|di|da|le|st)\\s+", "\\1") %>%
str_replace_all("^(dela|delas|delos|delo)\\s+", "\\1") %>%
str_replace_all("(mc|mac|van|san)\\s+", "\\1")
}
get_names_preis <- function(tab){
tab %>%
mutate(PAT_FIRST_NAME = replace_na(PAT_FIRST_NAME, ""),
PAT_MIDDLE_NAME = replace_na(PAT_MIDDLE_NAME, ""),
PAT_LAST_NAME = replace_na(PAT_LAST_NAME, "")) %>%
mutate(original = paste(PAT_FIRST_NAME, PAT_MIDDLE_NAME, PAT_LAST_NAME, sep="|")) %>%
mutate_at(vars(PAT_FIRST_NAME,  PAT_MIDDLE_NAME, PAT_LAST_NAME), tolower) %>%
mutate_at(vars(PAT_FIRST_NAME,  PAT_MIDDLE_NAME, PAT_LAST_NAME), join_dela) %>%
separate(PAT_LAST_NAME, c("PAT_LAST_NAME", "last_name_2"), sep = "\\s+", remove = TRUE, extra = "merge", fill = "right") %>%
separate(PAT_FIRST_NAME, c("PAT_FIRST_NAME", "PAT_MIDDLE_NAME_2"), sep = "\\s+", remove = TRUE, extra = "merge", fill = "right") %>%
mutate(last_name_2 = replace_na(last_name_2, ""),
PAT_MIDDLE_NAME_2 = replace_na(PAT_MIDDLE_NAME_2, "")) %>%
mutate_at(vars(last_name_2, contains("PAT_")), join_dela) %>%
mutate(PAT_MIDDLE_NAME =  ifelse(PAT_MIDDLE_NAME == "", PAT_MIDDLE_NAME_2, PAT_MIDDLE_NAME)) %>%
mutate(first_name = PAT_FIRST_NAME,
middle_name = PAT_MIDDLE_NAME,
middle_initial = str_sub(PAT_MIDDLE_NAME, 1, 1),
last_name_1 = PAT_LAST_NAME) %>%
mutate_at(vars(first_name, middle_name, middle_initial, last_name_1, last_name_2), fix_names) %>%
mutate(flag_middle_name = nchar(middle_name) > 1,
flag_middle_initial = middle_initial != "",
flag_last_name_2 = last_name_2 != "") %>%
mutate(pattern_1 = ifelse(flag_middle_name  & flag_last_name_2, paste(first_name, middle_name, last_name_1, last_name_2), NA),
pattern_2 = ifelse(flag_middle_initial & flag_last_name_2, paste(first_name, middle_initial, last_name_1, last_name_2), NA),
pattern_3 = ifelse(flag_last_name_2, paste(first_name, last_name_1, last_name_2), NA),
pattern_4 = ifelse(flag_middle_name, paste(first_name, middle_name, last_name_1), NA),
pattern_5 = ifelse(flag_middle_initial, paste(first_name, middle_initial, last_name_1), NA),
pattern_6 = paste(first_name, last_name_1),
pattern_7 = pattern_3) %>%
mutate(n_pattern_1 = nchar(pattern_1),
n_pattern_2 = nchar(pattern_2),
n_pattern_3 = nchar(pattern_3),
n_pattern_4 = nchar(pattern_4),
n_pattern_5 = nchar(pattern_5),
n_pattern_6 = nchar(pattern_6),
n_pattern_7 = n_pattern_3) %>%
select(PATIENT_ID, original, DOB, first_name, middle_name, middle_initial, last_name_1, last_name_2, contains("pattern"))
}
get_names_bp <- function(tab){
tab %>%
mutate(patient.firstName = replace_na(patient.firstName, ""),
patient.middleName = replace_na(patient.middleName, ""),
patient.lastName = replace_na(patient.lastName, ""),
patient.secondLastName = replace_na(patient.secondLastName, "")) %>%
mutate(original = paste(patient.firstName, patient.middleName, patient.lastName, patient.secondLastName, sep="|")) %>%
mutate_at(vars(patient.firstName, patient.middleName, patient.lastName, patient.secondLastName), tolower) %>%
mutate(tmp = patient.lastName %in% c("de", "del", "de la", "de las", "de los","de lo", "da ", "do ", "di ", "mac ", "mc ", "le ", "san ", "van ", "st ")) %>%
mutate(patient.lastName = ifelse(tmp, paste0(patient.lastName, patient.secondLastName), patient.lastName)) %>%
mutate(patient.secondLastName = ifelse(tmp, "", patient.secondLastName)) %>%
select(-tmp) %>%
mutate_at(vars(patient.firstName, patient.middleName, patient.lastName, patient.secondLastName), join_dela) %>%
separate(patient.lastName, c("patient.lastName", "last_name_2"), sep = "\\s+", remove = TRUE, extra = "merge", fill = "right") %>%
separate(patient.firstName, c("patient.firstName", "patient.middleName.2"), sep = "\\s+", remove = TRUE, extra = "merge", fill = "right") %>%
mutate(last_name_2 = replace_na(last_name_2, ""),
patient.middleName.2 = replace_na(patient.middleName.2, "")) %>%
mutate_at(vars(patient.firstName, patient.middleName.2, patient.middleName, patient.lastName, patient.secondLastName, last_name_2), join_dela) %>%
mutate(patient.middleName =  ifelse(patient.middleName == "", patient.middleName.2, patient.middleName)) %>%
mutate(last_name_2 =  ifelse(patient.secondLastName == "", last_name_2, patient.secondLastName)) %>%
mutate(first_name = patient.firstName,
middle_name = patient.middleName,
middle_initial = str_sub(patient.middleName, 1, 1),
last_name_1 = patient.lastName) %>%
mutate_at(vars(first_name, middle_name, middle_initial, last_name_1, last_name_2), fix_names) %>%
mutate(flag_middle_name = nchar(middle_name) > 1,
flag_middle_initial = middle_initial != "",
flag_last_name_2 = last_name_2 != "") %>%
mutate(pattern_1 = ifelse(flag_middle_name & flag_last_name_2, paste(first_name, middle_name, last_name_1, last_name_2), NA),
pattern_2 = ifelse(flag_middle_initial & flag_last_name_2, paste(first_name, middle_initial, last_name_1, last_name_2), NA),
pattern_3 = ifelse(flag_last_name_2, paste(first_name, last_name_1, last_name_2), NA),
pattern_4 = ifelse(flag_middle_name, paste(first_name, middle_name, last_name_1), NA),
pattern_5 = ifelse(flag_middle_initial, paste(first_name, middle_initial, last_name_1), NA),
pattern_6 = paste(first_name, last_name_1),
pattern_7 = ifelse(flag_last_name_2 & last_name_1 != last_name_2, paste(first_name, last_name_2, last_name_1), NA)) %>%
mutate(n_pattern_1 = nchar(pattern_1),
n_pattern_2 = nchar(pattern_2),
n_pattern_3 = nchar(pattern_3),
n_pattern_4 = nchar(pattern_4),
n_pattern_5 = nchar(pattern_5),
n_pattern_6 = nchar(pattern_6),
n_pattern_7 = nchar(pattern_7)) %>%
rename(DOB = "patient.birthDate") %>%
select(caseId, original, DOB, first_name, middle_name, middle_initial, last_name_1, last_name_2, contains("pattern"))
}
load("rdas/vax_data_BP.rda")
preis_matched_ids <- bp_preis_map$PATIENT_ID
preis <- vax_data_BP %>% filter(!(PATIENT_ID %in% preis_matched_ids))
preis<- preis %>% #, locale = readr::locale(encoding = "ISO-8859-1")) %>%
mutate(PATIENT_CITY = str_to_title(PATIENT_CITY)) %>%
mutate(PATIENT_CITY = fix_municipio(PATIENT_CITY)) %>%
mutate(PATIENT_CITY = na_if(PATIENT_CITY, "")) %>%
mutate(manu = case_when(VACC_CODE == "2080" ~ "MOD",
VACC_CODE == "2089" ~ "PFR",
VACC_CODE == "2091" ~ "ATZ",
VACC_CODE == "2092" ~ "JSN",
VACC_CODE == "2090" ~ "OTR")) %>%
mutate(ADMINISTRATION_DATE = as_date(ADMINISTRATION_DATE),
DOB = as_date(DOB)) %>%
arrange(ADMINISTRATION_DATE) %>%
group_by(PATIENT_ID) %>%
mutate(dose = seq_along(ADMINISTRATION_DATE)) %>%
ungroup()
preis <- full_join(filter(preis, dose == 1),
select(filter(preis, dose == 2), PATIENT_ID, FACILITY_NAME, ADMINISTRATION_DATE, dose, manu),
by = "PATIENT_ID", suffix = c("_1", "_2"))
bp_matched_ids <- bp_preis_map$caseId
bp <- readRDS("rdas/names.RDS") %>% filter(!(caseId %in% bp_matched_ids)) %>%
mutate(patient.physicalCity = na_if(na_if(patient.physicalCity,"No Domiciliado"),"N/A")) %>%
mutate(patient.birthDate = as_date(patient.birthDate)) %>%
mutate(patient.physicalCity = recode(patient.physicalCity, Loiza = "Loíza", `Rio Grande`="Río Grande")) %>%
filter(patient.physicalCity %in% unique(preis$PATIENT_CITY)) %>%
mutate(patient.sex = recode(patient.sex, Female = "F", Male = "M", Other = "O", Unknown = "U"))
year(bp$patient.birthDate[which(year(bp$patient.birthDate) == 57)])  <- 1957
year(bp$patient.birthDate[which(year(bp$patient.birthDate) == 1779)])  <- 1979
year(bp$patient.birthDate[which(year(bp$patient.birthDate) > 2021)])  <- year(bp$patient.birthDate[which(year(bp$patient.birthDate) > 2021)]) -100
#### TEST MATCH
preis_names <- get_names_preis(preis) %>%
filter(last_name_1!="")
bp_names <- get_names_bp(bp)
## Find perfect matches by each pattern FUNCS ----------------------------------
perfect_match <- map_df(1:7, function(i){
the_pattern <- paste0("pattern_", i)
query <- bp_names %>% mutate(pattern = !!sym(the_pattern)) %>%
filter(!is.na(pattern)) %>%
select(caseId, pattern, DOB)
target <- preis_names %>% rename(pattern = !!sym(the_pattern)) %>%
filter(!is.na(pattern)) %>%
select(PATIENT_ID, pattern, DOB)
left_join(query, target, by = c("pattern", "DOB")) %>%
mutate(pattern_bp = pattern, pattern_preis = pattern) %>%
select(-pattern, -DOB) %>%
mutate(type = i, dist = 0, score = 1) %>%
filter(!is.na(PATIENT_ID))
})
max_dists <- c(6, 5, 4, 4, 3, 3, 4)
fuzzy_match <- map_df(1:7, function(i){
cat("\nPattern",i,"\n")
pattern <- paste0("pattern_", i)
n_pattern <- paste0("n_pattern_", i)
query <- select(bp_names, all_of(c("caseId", "DOB", pattern, n_pattern))) %>%
setNames(c("caseId", "DOB", "pattern", "n_pattern")) %>%
filter(!is.na(pattern) & !caseId %in% pull(filter(perfect_match, type == i), "caseId"))
target <- select(preis_names, all_of(c("PATIENT_ID", "DOB", pattern, n_pattern))) %>%
setNames(c("PATIENT_ID", "DOB", "pattern", "n_pattern")) %>%
filter(!is.na(pattern))
DOBs_1 <- split(1:nrow(query), query$DOB)
DOBs_2 <- split(1:nrow(target), target$DOB)
common <- intersect(names(DOBs_1), names(DOBs_2))
DOBs_1 <- DOBs_1[common]
DOBs_2 <- DOBs_2[common]
pb <-  txtProgressBar( 0,1, length(common), style = 3)
res <- lapply(seq_along(common), function(j){
setTxtProgressBar(pb, j)
stringdist_left_join(query[DOBs_1[[j]],],
target[DOBs_2[[j]],],
by = "pattern",
method = "lv",
distance_col = "dist", max_dist = max_dists[i]) %>%
group_by(caseId) %>% slice_min(dist) %>% ungroup() %>%
mutate(score = 1 - dist/n_pattern.x, type = i) %>%
mutate(pattern_bp = pattern.x, pattern_preis = pattern.y) %>%
select(all_of(colnames(perfect_match)))
})
do.call(bind_rows, res)
})
fuzzy_match_reverse_date <- map_df(1:7, function(i){
cat("\nPattern",i,"\n")
pattern <- paste0("pattern_", i)
n_pattern <- paste0("n_pattern_", i)
out <- unique(c(pull(dplyr::filter(perfect_match, type == i), "caseId"),
pull(dplyr::filter(fuzzy_match, type == i), "caseId")))
query <-  select(bp_names, all_of(c("caseId", "DOB", pattern, n_pattern))) %>%
setNames(c("caseId", "DOB", "pattern", "n_pattern")) %>%
filter(!is.na(pattern) & !caseId %in% out) %>%
filter(day(DOB)<=12 & day(DOB)!=month(DOB)) %>%
mutate(DOB = ydm(DOB))
target <- select(preis_names, all_of(c("PATIENT_ID", "DOB", pattern, n_pattern))) %>%
setNames(c("PATIENT_ID", "DOB", "pattern", "n_pattern")) %>%
filter(!is.na(pattern))
DOBs_1 <- split(1:nrow(query), query$DOB)
DOBs_2 <- split(1:nrow(target), target$DOB)
common <- intersect(names(DOBs_1), names(DOBs_2))
DOBs_1 <- DOBs_1[common]
DOBs_2 <- DOBs_2[common]
pb <-  txtProgressBar(0,1, length(common), style = 3)
res <- lapply(seq_along(common), function(j){
setTxtProgressBar(pb, j)
stringdist_left_join(query[DOBs_1[[j]],],
target[DOBs_2[[j]],],
by = "pattern",
method = "lv",
distance_col = "dist", max_dist = max_dists[i]) %>%
group_by(caseId) %>% slice_min(dist) %>% ungroup() %>%
mutate(score = 1 - dist/n_pattern.x, type = i) %>%
mutate(pattern_bp = pattern.x, pattern_preis = pattern.y) %>%
select(all_of(colnames(perfect_match)))
})
do.call(bind_rows, res)
})
map <- bind_rows(perfect_match, fuzzy_match) %>% mutate(DOB_reversed = FALSE) %>%
bind_rows(mutate(fuzzy_match_reverse_date, DOB_reversed = TRUE))
freq_first_name <- data.frame(first_name = c(preis_names$first_name, preis_names$middle_name)) %>%
filter(first_name != "" & nchar(first_name) > 1) %>%
group_by(first_name) %>%
summarize(freq = n()) %>%
mutate(freq = freq / sum(freq))
freq_last_name <- data.frame(last_name = c(preis_names$last_name_1, preis_names$last_name_2)) %>%
filter(last_name != "" & nchar(last_name) > 1) %>%
group_by(last_name) %>%
summarize(freq = n()) %>%
mutate(freq = freq / sum(freq))
tmp1 <- map %>%
left_join(select(bp_names, caseId, original, first_name, middle_name, last_name_1, last_name_2), by = "caseId") %>%
left_join(freq_first_name, by = "first_name") %>%
mutate(freq = replace_na(freq, min(freq_first_name$freq))) %>%
rename(freq_first_name = freq) %>%
left_join(freq_first_name, by = c("middle_name" = "first_name")) %>%
mutate(freq = replace_na(freq, min(freq_last_name$freq))) %>%
rename(freq_middle_name = freq) %>%
left_join(freq_last_name, by = c("last_name_1" = "last_name")) %>%
mutate(freq = replace_na(freq, min(freq_last_name$freq))) %>%
rename(freq_last_name_1 = freq) %>%
left_join(freq_last_name, by = c("last_name_2" = "last_name")) %>%
rename(freq_last_name_2 = freq) %>%
left_join(select(bp, caseId, patient.physicalCity, patient.sex), by = "caseId") %>%
rename(municipio = patient.physicalCity, gender = patient.sex) %>%
setNames(c("caseId", "PATIENT_ID", "pattern_bp", "pattern_preis", "type", "dist", "score", "DOB_reversed",
paste0(c("original", "first_name", "middle_name", "last_name_1", "last_name_2", "freq_first_name", "freq_middle_name", "freq_last_name_1",
"freq_last_name_2", "municipio", "gender"), "_bp")))
tmp2 <- map %>%
left_join(select(preis_names, PATIENT_ID, original, first_name, middle_name, last_name_1, last_name_2), by = "PATIENT_ID") %>%
left_join(freq_first_name, by = "first_name") %>%
rename(freq_first_name = freq) %>%
left_join(freq_first_name, by = c("middle_name" = "first_name")) %>%
rename(freq_middle_name = freq) %>%
left_join(freq_last_name, by = c("last_name_1" = "last_name")) %>%
rename(freq_last_name_1 = freq) %>%
left_join(freq_last_name, by = c("last_name_2" = "last_name")) %>%
rename(freq_last_name_2 = freq) %>%
left_join(select(preis, PATIENT_ID, PATIENT_CITY, PATIENT_GENDER), by = "PATIENT_ID") %>%
rename(municipio = PATIENT_CITY, gender = PATIENT_GENDER) %>%
select(original, first_name, middle_name, last_name_1, last_name_1, last_name_2,
freq_first_name, freq_middle_name, freq_last_name_1, freq_last_name_2, municipio, gender) %>%
setNames(paste0(c("original", "first_name", "middle_name", "last_name_1", "last_name_2",
"freq_first_name", "freq_middle_name", "freq_last_name_1",
"freq_last_name_2", "municipio", "gender"), "_preis"))
bp_preis_matches <- bind_cols(tmp1, tmp2) %>%
mutate(freq_first_name = pmax(freq_first_name_bp, freq_first_name_preis, na.rm = TRUE),
freq_middle_name = pmax(freq_middle_name_bp, freq_middle_name_preis, na.rm = TRUE),
freq_last_name_1 = pmax(freq_last_name_1_bp, freq_last_name_1_preis, na.rm = TRUE),
freq_last_name_2 = pmax(freq_last_name_2_bp, freq_last_name_2_preis, na.rm = TRUE)) %>%
mutate(first_name_score = 1 - stringdist(first_name_bp, first_name_preis, method = "lv") / max(nchar(first_name_bp), nchar(first_name_preis)),
middle_name_score = 1 - stringdist(middle_name_bp, middle_name_preis, method = "lv") / max(nchar(middle_name_bp), nchar(middle_name_preis)),
last_name_1_score = 1 - stringdist(last_name_1_bp, last_name_1_preis, method = "lv") / max(nchar(last_name_1_bp), nchar(last_name_1_preis)),
last_name_2_score = 1 - stringdist(last_name_2_bp, last_name_2_preis, method = "lv") / max(nchar(last_name_2_bp), nchar(last_name_2_preis))) %>%
mutate(first_name_initial_match = str_sub(first_name_bp, 1, 1) == str_sub(first_name_preis, 1, 1),
middle_name_initial_match = str_sub(middle_name_bp, 1, 1) == str_sub(middle_name_preis, 1, 1),
last_name_1_initial_match = str_sub(last_name_1_bp, 1, 1) == str_sub(last_name_1_preis, 1, 1),
last_name_2_initial_match = str_sub(last_name_2_bp, 1, 1) == str_sub(last_name_2_preis, 2, 1)) %>%
select(caseId, PATIENT_ID,
original_bp, original_preis,
pattern_bp, pattern_preis,
municipio_bp, municipio_preis,
gender_bp, gender_preis,
type, dist, score, DOB_reversed,
first_name_bp, first_name_preis, first_name_score, freq_first_name, first_name_initial_match,
middle_name_bp, middle_name_preis, middle_name_score, freq_middle_name, middle_name_initial_match,
last_name_1_bp, last_name_1_preis, last_name_1_score, freq_last_name_1, last_name_1_initial_match,
last_name_2_bp, last_name_2_preis, last_name_2_score, freq_last_name_2, last_name_2_initial_match)
fit_glm <- function(tab){
#tab<-bp_preis_matches
dat <- tab %>%
group_by(type, DOB_reversed) %>% mutate(y = municipio_bp==municipio_preis &
gender_bp == gender_preis) %>%
filter(!is.na(y) & !is.na(score) &
!is.na(freq_first_name) & !is.na(freq_last_name_1) &
!is.na(first_name_initial_match) & !is.na(last_name_1_initial_match))
if(dat$DOB_reversed[1] & dat$type[1] == 1){
fit <- glm(y ~ score + log(freq_first_name) + log(freq_last_name_1), family = "binomial", data = dat)
} else{
fit <- glm(y ~ score + log(freq_first_name) + log(freq_last_name_1) +
first_name_initial_match + last_name_1_initial_match, family = "binomial", data = dat)
}
tab %>% mutate(match_score = predict(fit, newdata = tab, type = "response"))
}
### Checks based on city match
bp_preis_matches <- bp_preis_matches %>%
# group_by(type, DOB_reversed) %>%
do(fit_glm(.)) %>%
ungroup()
saveRDS(bp_preis_matches, file="rdas/bp_preis_matches_today.rds", compress="xz")
bp_preis_map_today <- bp_preis_matches %>%
filter(match_score > 0.7 | (match_score > 0.4 & municipio_bp == municipio_preis &
gender_bp == gender_preis)) %>%
mutate(tie_breaker = as.numeric(municipio_bp == municipio_preis)) %>%
mutate(tie_breaker = replace_na(tie_breaker, 0)) %>%
mutate(final_score = round(match_score*100) + (7-type)/10 + tie_breaker/100 + as.numeric(!DOB_reversed)/1000) %>%
group_by(caseId) %>%
slice_max(final_score) %>%
ungroup() %>%
group_by(caseId, PATIENT_ID) %>% ##remove ties that match to same preis record.
slice(1) %>%
ungroup() %>%
select(-final_score,-tie_breaker)
lista <- list(bp_preis_map, bp_preis_map_today)
bp_preis_map <- do.call("rbind",lista)
map_update <- now()
save(bp_preis_map, map_update, file="rdas/bp_preis_map.rda")
source("~/R/vacunaspr/wrangle-vacunas.R")
source("~/R/vacunaspr/wrangle-casos-vacunados.R")
source("~/R/vacunaspr/wrangle.R")
runApp()
runApp()
last_day <- max(c(dat_vax$insert_date_1, dat_vax$insert_date_2, dat_vax$insert_date_3), na.rm=TRUE)
dat_vax <- vax_data_BP %>%
mutate(ADMINISTRATION_DATE = convert_date(ADMINISTRATION_DATE)) %>%
mutate(INSERT_STAMP = convert_date(INSERT_STAMP)) %>%
mutate(manu = case_when(VACC_CODE == "2080" ~ "MOD",
VACC_CODE == "2089" ~ "PFR",
VACC_CODE == "2091" ~ "ATZ",
VACC_CODE == "2092" ~ "JSN",
VACC_CODE == "2090" ~ "OTR")) %>%
mutate(manu = factor(manu, levels = unique(manu))) %>%
mutate(original_date = ADMINISTRATION_DATE) %>%
mutate(ADMINISTRATION_DATE = if_else(ADMINISTRATION_DATE<first_day |
ADMINISTRATION_DATE>download_date,
as_date(NA),
ADMINISTRATION_DATE)) %>%
select(PATIENT_ID, PATIENT_GENDER, DOB, PATIENT_CITY, PATIENT_STATE, ADMINISTRATION_DATE, manu, original_date, INSERT_STAMP, FACILITY_NAME) %>%
setNames(c("id", "gender", "dob", "municipio", "estado", "date", "manu", "original_date", "insert_date", "proveedor")) %>%
mutate(gender = case_when(
is.na(gender) ~ "O",
gender=="F" ~ "F",
gender=="M" ~ "M",
gender=="U" ~ "O",
gender=="O" ~ "O")) %>%
mutate(gender = factor(gender, levels = gender_levels)) %>%
mutate(fixed_year = if_else(month(original_date)==12,
make_date(2020, month(original_date), day(original_date)),
make_date(2021, month(original_date), day(original_date)))) %>%
mutate(date = case_when(
(!is.na(date)) ~ date,
(is.na(date) & month(original_date) == 12 & year(original_date) == 2020) ~ make_date(2020, 12, 15),
(is.na(date) & dob!=original_date & as.numeric(insert_date - fixed_year) <= 30 & insert_date >= fixed_year) ~ fixed_year,
TRUE ~ insert_date)) %>%
arrange(date) %>%
group_by(id) %>%
mutate(dose = seq_along(date)) %>%
ungroup() %>%
mutate(age = floor(as.numeric(difftime(date, dob, units=c("days")))/365)) %>%
mutate(ageRange = cut(age, c(age_starts, Inf), labels = age_levels, right=F)) %>%
mutate(municipio = str_to_title(municipio)) %>%
mutate(municipio = fix_municipio(municipio)) %>%
mutate(municipio = replace_na(municipio, "No reportado")) %>%
mutate(municipio = factor(municipio, levels = unique(municipio))) %>%
select( -dob, -age, -fixed_year, -original_date) %>%
simplify_proveedor() %>%
mutate(proveedor = replace_na(proveedor, "No reportado")) %>%
mutate(proveedor = factor(proveedor, levels = unique(proveedor))) %>%
mutate(estado = replace_na(estado, "No reportado")) %>%
mutate(estado = factor(estado, levels = unique(estado)))
dat_vax <- full_join(filter(dat_vax, dose == 1),
filter(dat_vax, dose == 2),
by = "id", suffix = c("", "_2")) %>%
full_join(filter(dat_vax, dose == 3), by="id", suffix = c("_1" ,"_3")) %>%
mutate(ageRange_1 = if_else(!is.na(ageRange_2) & is.na(ageRange_1),
ageRange_2,
ageRange_1)) %>%
mutate(gender_1 = if_else(!is.na(gender_2) & is.na(gender_1),
gender_2,
gender_1)) %>%
mutate(gender_1 = if_else(gender_2 %in% c("F","M") & !gender_1 %in% c("F","M"),
gender_2,
gender_1)) %>%
select( -dose_1, -dose_2, -dose_3, -municipio_2, -municipio_3, -estado_2, -estado_3, -gender_2, -gender_3) %>%
rename(municipio = "municipio_1", gender = "gender_1", estado = "estado_1") %>%
data.table::as.data.table()
colnames(dat_vax)
class(dat_vax)
## RDS for dat_casos_vacunados
saveRDS(dat_vax, file="rdas/dat_vax.rds")
dat_vax <- dat_vax %>%
select(-id)
colnames(dat_vax)
class(dat_vax)
the_stamp <- now()
save(dat_vax, the_stamp,
file = "rdas/dat_vax.rda")
dat_cases <- jsonlite::fromJSON(rawToChar(dat$content), flatten = TRUE) %>%
mutate(across(contains("Dat"), convert_date)) %>%
filter(caseType %in% c("Confirmed", "Probable") &
earliestRankingTestDate >= first_day &
earliestRankingTestDate <= last_day) %>%
mutate(lastHospitalizedDate = na_if(lastHospitalizedDate, "0001-01-01T00:00:00Z")) %>%
mutate(ageRange = cut(age, c(age_starts, Inf), labels = age_levels,  right=F )) %>%
mutate(ageRange = factor(ageRange, levels = age_levels)) %>%
as_tibble() %>%
rename(dose_1 = firstVaccineDoseDate,
dose_2 = secondVaccineDoseDate,
gender = sex,
manu = vaccineManufacturer, date = earliestRankingTestDate,
date_hosp = lastHospitalizedDate,
date_death = deathDate) %>%
mutate(manu = recode(manu, 'Janssen/J&J' = 'JSN',
Moderna = 'MOD',
Pfizer = "PFR",
Astrazeneca = "AZN")) %>%
mutate(gender = case_when(
is.na(gender) ~ "O",
gender=="Female" ~ "F",
gender=="Male" ~ "M",
gender=="Unknown" ~ "O",
gender=="Otro" ~ "O")) %>%
mutate(gender = factor(gender, levels = unique(gender))) %>%
mutate(dose_2 = if_else(manu %in% c("JSN", "AZN"), dose_1, dose_2))
### FOR NOW USE MY OWN MATCH
load("rdas/bp_preis_map.rda")
dat_vax <- readRDS("rdas/dat_vax.rds")
bp_preis_map <- bp_preis_map %>% select(PATIENT_ID, caseId, match_score)
#dat_vax <- dat_vax # %>% select(id, date_1, manu_1,date_2, date_3, ,manu_1)
### quick check
tmp <- dat_cases %>% left_join(bp_preis_map, by = "caseId") %>%
left_join(dat_vax, by = c("PATIENT_ID" = "id"))
print(mean(tmp$dose_1==tmp$date_1,na.rm=TRUE))
print(mean(tmp$dose_2==tmp$date_2,na.rm=TRUE))
print(c(sum(!is.na(tmp$dose_1)), sum(!is.na(tmp$date_1))))
print(c(sum(!is.na(tmp$dose_2)), sum(!is.na(tmp$date_2))))
dat_cases <- dat_cases %>% select(-dose_1, -dose_2, -manu) %>%
left_join(bp_preis_map, by = "caseId") %>%
left_join(dat_vax, by = c("PATIENT_ID" = "id"))
dat_cases_vax <- dat_cases %>%
select(date, ageRange, gender.x, date_hosp,
death, date_death, municipio, estado, date_1, manu_1, proveedor_1,
date_2, manu_2, proveedor_2, date_3, manu_3, proveedor_3, match_score) %>%
mutate(hosp = if_else(is.na(date_hosp), FALSE, TRUE)) %>%
rename(gender = "gender.x") %>%
data.table::as.data.table()
class(dat_cases_vax)
the_stamp <- now()
save(dat_cases_vax,
the_stamp,
file = "rdas/dat_cases_vax.rda")
source("~/R/vacunaspr/wrangle.R")
runApp()
source("~/R/vacunaspr/wrangle-vacunas.R")
source("~/R/vacunaspr/wrangle-casos-vacunados.R")
source("~/R/vacunaspr/wrangle.R")
runApp()
the_stamp <- Sys.time()
first_day <- make_date(2020, 12, 15)
last_day <- max(c(dat_vax$insert_date_1, dat_vax$insert_date_2, dat_vax$insert_date_3), na.rm=TRUE)
span_start <- 14 ##cuando empezar (ejemplo 14 = dos semanas anters)
span <- 14
gender_levels <- c("F", "M", "O")
manu_levels <- c("UNV", "MOD", "PFR", "JSN")
span_range <- seq(last_day-days(span+span_start-1), last_day - days(span), by = "day")
age_starts <- c(0, 5, 12, 18, seq(30, 80, 10))
age_ends <- c(age_starts[-1]-1, Inf)
age_levels <- paste(age_starts, age_ends, sep = "-")
age_levels[length(age_levels)] <- paste0(age_starts[length(age_levels)],"+")
save(the_stamp, first_day, last_day, span_range, age_levels, file = "rdas/dates.rda")
source("~/R/vacunaspr/wrangle.R")
runApp()
load("~/R/vacunaspr/rdas/dat_vax.rda")
View(dat_vax)
load("~/R/vacunaspr/rdas/dat_cases_vax.rda")
View(dat_cases_vax)
